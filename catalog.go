// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package main

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"el": &dictionary{index: elIndex, data: elData},
		"en": &dictionary{index: enIndex, data: enData},
		"pt": &dictionary{index: ptIndex, data: ptData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"Hello ":       1,
	"Hello world!": 0,
	"sql":          2,
}

var elIndex = []uint32{ // 4 elements
	0x00000000, 0x0000000c, 0x0000001d, 0x0000001d,
} // Size: 40 bytes

const elData string = "\x02Ol치 sssss!\x04\x00\x01 \f\x02Ol치sssssss"

var enIndex = []uint32{ // 4 elements
	0x00000000, 0x0000000d, 0x00000018, 0x0000002f,
} // Size: 40 bytes

const enData string = "" + // Size: 47 bytes
	"\x02Hello world!\x04\x00\x01 \x06\x02Hello\x02sql cmd to run queries"

var ptIndex = []uint32{ // 4 elements
	0x00000000, 0x0000000c, 0x00000016, 0x00000016,
} // Size: 40 bytes

const ptData string = "\x02Ol치 Mundo!\x04\x00\x01 \x05\x02Ol치"

// Total table size 218 bytes (0KiB); checksum: 8A71C1A
